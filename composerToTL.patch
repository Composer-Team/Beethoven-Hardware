Index: src/main/scala/amba/axi4/ToTL.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/amba/axi4/ToTL.scala b/src/main/scala/amba/axi4/ToTL.scala
--- a/src/main/scala/amba/axi4/ToTL.scala	(revision f6e0f0eae3023bf36f39b65c952937931ee41b51)
+++ b/src/main/scala/amba/axi4/ToTL.scala	(date 1663179163756)
@@ -82,14 +82,15 @@
       edgeOut.manager.requireFifo()
 
       // Look for an Error device to redirect bad requests
-      val errorDevs = edgeOut.manager.managers.filter(_.nodePath.last.lazyModule.className == "TLError")
-      require (!errorDevs.isEmpty, "There is no TLError reachable from AXI4ToTL. One must be instantiated.")
-      val errorDev = errorDevs.maxBy(_.maxTransfer)
-      val error = errorDev.address.head.base
-      require (errorDev.supportsPutPartial.contains(edgeOut.manager.maxTransfer),
-        s"Error device supports ${errorDev.supportsPutPartial} PutPartial but must support ${edgeOut.manager.maxTransfer}")
-      require (errorDev.supportsGet.contains(edgeOut.manager.maxTransfer),
-        s"Error device supports ${errorDev.supportsGet} Get but must support ${edgeOut.manager.maxTransfer}")
+      // Don't need error device for Composer
+//      val errorDevs = edgeOut.manager.managers.filter(_.nodePath.last.lazyModule.className == "TLError")
+//      require (!errorDevs.isEmpty, "There is no TLError reachable from AXI4ToTL. One must be instantiated.")
+//      val errorDev = errorDevs.maxBy(_.maxTransfer)
+      val error = 0x10000000000L // errorDev.address.head.base
+//      require (errorDev.supportsPutPartial.contains(edgeOut.manager.maxTransfer),
+//        s"Error device supports ${errorDev.supportsPutPartial} PutPartial but must support ${edgeOut.manager.maxTransfer}")
+//      require (errorDev.supportsGet.contains(edgeOut.manager.maxTransfer),
+//        s"Error device supports ${errorDev.supportsGet} Get but must support ${edgeOut.manager.maxTransfer}")
 
       val r_out = Wire(out.a)
       val r_size1 = in.ar.bits.bytes1()
